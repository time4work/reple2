<!DOCTYPE html>
<html class="ng-scope" np-app="Reple">
<head>
  <% include ../partials/header.ejs %>
<!--     <link rel="stylesheet" href="http://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.css"> -->
    <link rel="stylesheet" type="text/css" href="/stylesheets/bootstrap-tagsinput.css">
    <script src="http://bootstrap-tagsinput.github.io/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"></script>
</head>
<body class='side-pad' id='project-tags'>
  <% include ../partials/topnav.ejs %>
  <% include ../partials/leftnav.ejs %>
  
  <div class="container">
    <div class="row">

      <div class="tag-list col-md-6">
        <div class="psearch">
          <input id="search" placeholder="SEARCH BY NAME" type="text">
          <img class="find noselect" src="/img/s-icon.svg">
        </div>

        <!-- <div class="tag-list-wrapper"> -->
          <ul>
<% scope.tags.all.forEach(function(tag, iter){ %>
  <li tag-id='<%= tag.id %>'  
    class="tag-list-item">
    <span>
      <%= tag.name %>
      <sub>[ <%= tag.flag %> ]</sub>
    </span>
    <div class="list-options">
      <a onclick="addPositiveTag('<%= tag.id %>')">P</a>
      <a onclick="addNegativeTag('<%= tag.id %>')">N</a>
      <a onclick="addHideTag('<%= tag.id %>')">H</a>
      <a onclick="addCategoriesTag('<%= tag.id %>')">C</a>
    </div>
  </li>
<% }); %>

          </ul>
        <!-- </div> -->
      </div>

      <div class="tag-holder col-md-6">
        <div class="save-btn">
          <button class='btn btn-success' onclick='save()'>save</button>
        </div>

        <div class="tags select _pos">
          <span class="label">Positive tags</span>
          <select multiple id='pos-tag' readonly="readonly">
          </select>
        </div>
        <div class="tags select _neg">
          <span class="label">Negative tags</span>
          <select multiple id='neg-tag' readonly="readonly">
          </select>
        </div>
        <div class="tags select _hide">
          <span class="label">Hide tags</span>
          <select multiple id='hide-tag' readonly="readonly">
          </select>
        </div>
        <div class="tags select categories">
          <span class="label">Categories tags</span>
          <select multiple id='categories-tag' readonly="readonly">
          </select>
        </div>
      </div>

    </div>
  </div>
</body>
<script>
  const tags = <%-JSON.stringify(scope.tags)%>;
  console.log( tags );

  const projectID = <%=scope.project.id%>;
  console.log( projectID );

  function addPositiveTag(id){
    var tag = tags.all.filter( obj =>  obj.id == id)[0];
    var flag = tag.flag ? tag.flag : -1;

    var nTags = $('#neg-tag').val();
    if( nTags ) {
      nTags = nTags.map((e)=>{ return parseInt(e, 10); });
      for(var i=0; i<nTags.length; i++){
        let nTagID = nTags[i];
        let nTag = tags.all.filter( obj =>  obj.id == nTagID)[0];
        if( nTag.flag == flag && nTag.id != id ){
          snackbox(`conflict with tag: "${nTag.name}", group: "${nTag.flag}"`);
          return;
        }
      }
      for(var i=0; i<nTags.length; i++){
        let nTagID = nTags[i];
        if(nTagID == id) {
          $('#neg-tag').tagsinput('remove', id);
          snackbox("negative tag replaced");
        }
      }
    }

    // console.log(tag);
    if(tag)
      $('#pos-tag').tagsinput( 'add', {
        "id":tag.id, 
        "label":tag.name
      } );
    else console.log('bad tag id in [ addPositiveTag ]');
  } 


  function addNegativeTag(id){
    var tag = tags.all.filter( obj =>  obj.id == id)[0];
    var flag = tag.flag ? tag.flag : -1;

    var pTags = $('#pos-tag').val();
    if( pTags ) {
      pTags = pTags.map((e)=>{ return parseInt(e, 10); });
      for(var i=0; i<pTags.length; i++){
        let pTagID = pTags[i];
        let pTag = tags.all.filter( obj =>  obj.id == pTagID)[0];
        if( pTag.flag == flag && pTag.id != id ){
          snackbox(`conflict with tag "${pTag.name}", group: "${pTag.flag}"`);
          return;
        }
      }
      for(var i=0; i<pTags.length; i++){
        let pTagID = pTags[i];
        if(pTagID == id) {
          $('#pos-tag').tagsinput('remove', id);
          snackbox("positive tag replaced");
        }
      }
    }

    // console.log(tag);
    if(tag)
      $('#neg-tag').tagsinput( 'add', {
        "id":tag.id, 
        "label":tag.name
      } );
    else console.log('bad tag id in [ addNegativeTag ]');
  } 


  function addHideTag(id){
    var tag = tags.all.filter( obj =>  obj.id == id)[0];
    // console.log(tag);
    if(tag)
      $('#hide-tag').tagsinput( 'add', {
        "id":tag.id, 
        "label":tag.name
      } );
    else console.log('bad tag id in [ addHideTag ]');
  } 


  function addCategoriesTag(id){
    var tag = tags.all.filter( obj =>  obj.id == id)[0];
    // console.log(tag);
    if(tag)
      $('#categories-tag').tagsinput( 'add', {
        "id":tag.id, 
        "label":tag.name
      } );
    else console.log('bad tag id in [ addCategoriesTag ]');
  } 


  function save(){
    let data = {};
    data.type = 'project.tags.save';
    // data.tags = {};

    let positive = $('#pos-tag').val();
    let negative = $('#neg-tag').val();
    let hidden = $('#hide-tag').val();
    let categories = $('#categories-tag').val();

    let tags = {};
    tags.positive = positive ? positive.map((e)=>{ 
      return parseInt(e, 10); 
    }) : [];
    tags.negative = negative ? negative.map((e)=>{ 
      return parseInt(e, 10); 
    }) : [];
    tags.hidden = hidden ? hidden.map((e)=>{ 
      return parseInt(e, 10); 
    }) : [];
    tags.categories = categories ? categories.map((e)=>{ 
      return parseInt(e, 10); 
    }) : [];
    data.tags = tags;

    console.log(data);
    console.log(JSON.stringify(data));
    // ajax('/project/'+projectID+'/tags/', (data), (result)=>{
    //   console.log(result);
    // });
    var xhr = new XMLHttpRequest();
    xhr.open("POST", '/project/'+projectID+'/tags/', true);
    xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
    xhr.onreadystatechange = function (){
        console.log(xhr);
        if(xhr.readyState == 4){
          console.log(xhr);
        }
            // window.location.replace(xhr.responseURL);
    };
    xhr.send(JSON.stringify(data));
    return false;
  }
  
  $(function(){
    console.log('start');
      $('#pos-tag').tagsinput({
        allowDuplicates: false,
        itemValue: 'id',
        itemText: 'label'
      });
      $('#neg-tag').tagsinput({
        allowDuplicates: false,
        itemValue: 'id',
        itemText: 'label'
      });
      $('#hide-tag').tagsinput({
        allowDuplicates: false,
        itemValue: 'id',
        itemText: 'label'
      });
      $('#categories-tag').tagsinput({
        allowDuplicates: false,
        itemValue: 'id',
        itemText: 'label'
      });

      $(".bootstrap-tagsinput input").attr("readonly", true);
     
      for(var i=0; i<tags.assoc.length; i++){
        let tag = tags.assoc[i];
        $('#pos-tag')
          .tagsinput('add', {"id":tag.tagID, "label":tag.name} );
      }     
      for(var i=0; i<tags.stop.length; i++){
        let tag = tags.stop[i];
        $('#neg-tag')
          .tagsinput('add', {"id":tag.tagID, "label":tag.name} );
      }     
      for(var i=0; i<tags.unshow.length; i++){
        let tag = tags.unshow[i];
        $('#hide-tag')
          .tagsinput('add', {"id":tag.tagID, "label":tag.name} );
      }     
      for(var i=0; i<tags.categories.length; i++){
        let tag = tags.categories[i];
        $('#categories-tag')
          .tagsinput('add', {"id":tag.tagID, "label":tag.name} );
      }
    // var assocTags = $('#assoc-tag').val();
    // var stopTags = $('#stop-tag').val();
    // if( assocTags )
    //     assocTags = assocTags.map((e)=>{ return parseInt(e, 10); });
    // if( stopTags )
    //     stopTags = stopTags.map((e)=>{ return parseInt(e, 10); });



      ///////////////////////////////////////

      // $('#stop-tag').tagsinput('add', {"id": tag.tagID , "label": tag.name } );

      // $('div.tags button.add-more.assoc-tag').on('click', (e)=>{
      //   // console.log('click');
      //   var btn = e.target;
      //   var neighbour = btn.previousElementSibling;
      //   var tag_name = neighbour.options[neighbour.selectedIndex].value;
      //   var tag_id = neighbour.options[neighbour.selectedIndex].getAttribute('tag-id');

      //   $('#assoc-tag').tagsinput('add', {"id":tag_id, "label":tag_name} );
      // });
      
      // $('div.tags button.add-more.stop-tag').on('click', (e)=>{
      //   // console.log('click');
      //   var btn = e.target;
      //   var neighbour = btn.previousElementSibling;
      //   var tag_name = neighbour.options[neighbour.selectedIndex].value;
      //   var tag_id = neighbour.options[neighbour.selectedIndex].getAttribute('tag-id');
      //   $('#stop-tag').tagsinput('add', {"id":tag_id, "label":tag_name} );
      // });
  });

</script>
</html>
